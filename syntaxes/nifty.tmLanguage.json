{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Nifty",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#callables"
		},
		{
			"include": "#ident"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#digits"
		},
        {
            "include": "#macros"
        }
	],
	"repository": {
		"keywords": {
			"patterns": [
                {
                    "name": "keyword.control.nifty",
                    "match": "\\b(if|else|elif|while|until|for|return|when|break|continue|impl|constimpl|endimpl|in|defer|defer_err|restrict|goto|try)\\b"
                },
                {
                    "name": "keyword.intrinsics.nifty",
                    "match": "\\b(cast|recast|auto_cast|type_of|typeid_of|typeinfo_of|type_from|size_of|name_of|align_of)\\b"
                },
                {
                    "name": "keyword.operator.new",
                    "match": "\\b(new)\\b"
                },
                {
                    "name": "keyword.operator.delete",
                    "match": "\\b(delete)\\b"
                },
                {
                    "name": "constant.language.null.nifty",
					"match": "\\b(null|undefined|unused)\\b"
                },
                {
					"name": "constant.language.boolean.nifty",
					"match": "\\b(true|false)\\b"
				},
                {
                    "match": "(<<|>>|~|\\^)",
                    "name": "keyword.operator.bitwise.nifty"
                },
                {
                    "match": "((&|\\^|\\||<<|>>)=)",
                    "name": "keyword.operator.assignment.bitwise.nifty"
                },
                {
                    "match": "(==|!=|<=|>=|<>|<|>)",
                    "name": "keyword.operator.comparison.nifty"
                },
                {
                    "match": "(@?[+*/%-]=)",
                    "name": "keyword.operator.assignment.arithmetic.nifty"
                },
                {
                    "match": "(:=|::=|=)",
                    "name": "keyword.operator.assignment.nifty"
                },
                {
                    "match": "(@?(\\-\\-|\\+\\+))",
                    "name": "keyword.operator.increment-decrement.nifty"
                },
                {
                    "match": "(\\.\\.|\\.\\.\\.)",
                    "name": "keyword.operator.range.nifty"
                },
                {
                    "match": "(@?(\\-|\\+|\\*|\\/|%))",
                    "name": "keyword.operator.arithmetic.nifty"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.nifty"
                },
                {
                    "match": "(\\||&)",
                    "name": "keyword.operator.bitwise.nifty"
                },
                {
                    "match": "\\b(package|api)\\b",
                    "name": "keyword.other.package.nifty"
                },
                {
                    "match": "\\b(use|using|as|extern)\\b",
                    "name": "keyword.other.use.nifty"
                },
                {
                    "name": "keyword.other.behavior.nifty",
                    "match": "\\b(behavior|does)\\b"
                },
                {
                    "name": "storage.type",
                    "match": "\\b(struct|enum)\\b"
                },
                {
                    "match": "\\b(bool|b8|b16|b32|b64|char|string|cstring|int|uint|uintptr|float|double|s8|s16|s32|s64|s128|u8|u16|u32|u64|u128|f16|f32|f64|f128|void|typeid|rawptr)\\b",
                    "name": "storage.type.primitive.nifty"
                },
                {
                    "name": "keyword.other.signal_slot.nifty",
                    "match": "\\b(emit)\\b"
                },
                {
                    "name": "keyword.other.included",
                    "match": "\\b(assert|assert_db|panic)\\b"
                },
                {
                    "name":"entity.name.type.Self.nifty",
                    "match": "\\b(Self)\\b"
                }
            ]
		},
        "statements": {
			"patterns": [
				{
					"match": "\\b(let|val|const)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.nifty"
						},
						"2": {
							"name": "support.variable.nifty"
						}
					}
				},
				{
                    "match": "\\b(fn|md)\\s+(([A-Za-z_][A-Za-z0-9_]*(::))?[A-Za-z_][A-Za-z0-9_]*)\\??\\s*[\\(<\\[]",
					"captures": {
						"1": {
							"name":"keyword.type.function.nifty"
						},
						"2": {
							"name":"entity.name.function.nifty"
						},
						"3": {
							"name":"entity.name.type.type.nifty"
						},
                        "4": {
                            "name": "punctuation.coloncolon"
                        }
					}
				},
                {
                    "match": "\\b(fn|md)\\s+([A-Za-z_][A-Za-z0-9_]*)\\??\\s+(overloads)\\s*{",
					"captures": {
						"1": {
							"name":"keyword.type.function.nifty"
						},
						"2": {
							"name":"entity.name.function.nifty"
						},
                        "3": {
                            "name":"keyword.type.overload.nifty"
                        }
					}
				},
                {
					"match": "\\b(type)\\s+([A-Za-z_][A-Za-z0-9_]*)(?:\\s*(as)\\s*([A-Za-z_][A-Za-z0-9_]*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.type.nifty"
						},
						"2": {
							"name": "entity.name.type.type.nifty"
						},
						"3": {
							"name": "storage.modifier.nifty"
						},
						"4": {
							"name": "entity.name.type.type.nifty"
						}
					}
				}
			]
		},
        "callables": {
			"patterns": [
				{
					"match": "([A-Za-z_][A-Za-z0-9_]*)\\(",
                    "captures": {
                        "1": {
                            "name": "support.function.nifty"
                        }
                    }
				}
			]
		},
		"strings": {
            "patterns": [ 
                {
                    "name": "string.quoted.double.nifty",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nifty",
                            "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.nifty",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nifty",
                            "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )"
                        }
                    ]
                },
                {
                    "name": "string.quoted.raw.nifty",
                    "begin": "`",
                    "end": "`"
                }
            ]
		},
		"digits": {
			"patterns": [
				{
					"name": "constant.numeric.nifty",
					"match": "\\b[0-9]+(?:[xqb_][0-9_A-Fa-f]+)?\\.?[fFdD]?\\b"
				}
			]
		},
        "ident": {
			"patterns": [
				{
					"name": "variable.other.readwrite.nifty",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		},
        "comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?!/)|/-",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.nifty"
						}
					},
					"end": "\\*/|-/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.nifty"
						}
					},
					"name": "comment.block.documentation.nifty",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				},
				{
					"begin": "/\\*:|/-",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.nifty"
						}
					},
					"end": "\\*/|-/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.nifty"
						}
					},
					"name": "comment.block.documentation.playground.nifty",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				},
				{
					"begin": "/\\*|/-",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.nifty"
						}
					},
					"end": "\\*/|-/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.nifty"
						}
					},
					"name": "comment.block.nifty",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				},
				{
					"match": "\\*/|-/",
					"name": "invalid.illegal.unexpected-end-of-block-comment.nifty"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.nifty"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "///",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.nifty"
								}
							},
							"end": "^",
							"name": "comment.line.triple-slash.documentation.nifty"
						},
						{
							"begin": "//:",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.nifty"
								}
							},
							"end": "^",
							"name": "comment.line.double-slash.documentation.nifty"
						},
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.nifty"
								}
							},
							"end": "^",
							"name": "comment.line.double-slash.nifty"
						}
					]
				}
			],
			"repository": {
				"nested": {
					"begin": "/\\*|/-",
					"end": "\\*/|-/",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				}
			}
		},
        "macros": {
            "patterns": [
                {
                    "match": "#([A-Za-z_][A-Za-z0-9_]*)",
                    "captures": {
                        "0": {
                            "name": "support.function.macro.nifty"
                        },
                        "1": {
                            "name": "support.function.macro.nifty"
                        }
                    }
                },
                {
                    "match": "(#)(\\[)",
                    "captures": {
                        "0": {
                            "name": "punctuation.bracket.open"
                        },
                        "1": {
                            "name": "support.function.macro.nifty"
                        }
                    }
                }
            ]
        }
	},
	"scopeName": "source.nifty"
}